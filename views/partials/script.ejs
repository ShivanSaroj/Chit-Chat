<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script>
// Like functionality
document.addEventListener('DOMContentLoaded', function() {
    const likeButtons = document.querySelectorAll('.like-btn');
    
    likeButtons.forEach(button => {
        button.addEventListener('click', async function() {
            const blogId = this.dataset.blogId;
            
            try {
                const response = await fetch(`/blog/like/${blogId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const icon = this.querySelector('i');
                    const countSpan = this.querySelector('.like-count');
                    
                    if (data.isLiked) {
                        // User just liked the post - make it red
                        icon.className = 'bi bi-heart-fill text-danger me-1';
                        this.dataset.liked = 'true';
                    } else {
                        // User just unliked the post - make it normal
                        icon.className = 'bi bi-heart me-1';
                        this.dataset.liked = 'false';
                    }
                    
                    // Update the count
                    countSpan.textContent = data.likesCount || 0;
                } else {
                    alert(data.message || 'Error liking post');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error liking post');
            }
        });
    });
});

// Delete blog function
function deleteBlog(blogId) {
    if (confirm('Are you sure you want to delete this post?')) {
        fetch(`/blog/delete/${blogId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the post.');
        });
    }
}

// Follow author functionality from blog posts
document.addEventListener('DOMContentLoaded', function() {
    const followAuthorButtons = document.querySelectorAll('.follow-author-btn');
    
    followAuthorButtons.forEach(button => {
        button.addEventListener('click', async function() {
            const userId = this.dataset.userId;
            
            try {
                const response = await fetch(`/user/follow/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    if (data.isFollowing) {
                        // User is now following - show connection indicator
                        this.outerHTML = `
                            <div class="d-flex align-items-center me-2">
                                <i class="bi bi-person-check-fill text-success me-1"></i>
                                <small class="text-success">Following</small>
                            </div>
                        `;
                    }
                } else {
                    alert(data.message || 'Error following user');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error following user');
            }
        });
    });
});

// Check for unread messages
async function checkUnreadMessages() {
    try {
        const response = await fetch('/chat/unread-count');
        const data = await response.json();
        
        if (data.success && data.unreadCount > 0) {
            const badge = document.getElementById('unreadBadge');
            if (badge) {
                badge.textContent = data.unreadCount;
                badge.style.display = 'inline';
            }
        }
    } catch (error) {
        console.log('Could not check unread messages');
    }
}

// Check every 30 seconds if user is logged in
if (document.querySelector('[href="/chat"]')) {
    checkUnreadMessages();
    setInterval(checkUnreadMessages, 30000);
}
</script>

    
